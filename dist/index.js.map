{"version":3,"sources":["../src/ifdef-parser.ts","../src/preprocessor.ts"],"names":[],"mappings":";AAAA,OAAO,SAAS;AAGT,IAAM,sBACX;AACF,eAAsB,WACpB,MACA,UAAoC;AAAA,EAClC,OAAO;AAAA,EACP,QAAQ,QAAQ;AAClB,GACiB;AAEjB,QAAM,SAAS,KAAK;AAAA,IAClB,QAAQ,SAAS;AAAA,IACjB,CAAC,OAAO,WAAW,YAAY;AAE7B,YAAM,CAAC,WAAW,WAAW,IAAI,QAAQ,MAAM,aAAa;AAC5D,YAAM,SAAS,IAAI;AAAA,QACjB,UAAU,kBAAkB,aAAa,mBACvC,eAAe;AAAA,QAEjB,QAAQ;AAAA,MACV;AAEA,aAAO;AAAA,IACT;AAAA,EACF;AAEA,UACE,iCACI,OACD,MAAM,MACN,OAAO,CAAC,MAAM,EAAE,QAChB,KAAK,UAAS;AAErB;AACA,IAAO,uBAAQ;;;AClCR,SAAS,kBACf,UAAoC,EAAE,OAAO,oBAAoB,GAChE;AACD,SAAO;AAAA,IACN,QAAQ,OAAO,EAAE,QAAQ,MAAM;AAC9B,aAAO;AAAA,QACN,MAAM,MAAM,qBAAW,SAAS,OAAO;AAAA,MACxC;AAAA,IACD;AAAA,IACA,QAAQ,OAAO,EAAE,QAAQ,MAAM;AAC9B,aAAO;AAAA,QACN,MAAM,MAAM,qBAAW,SAAS,OAAO;AAAA,MACxC;AAAA,IACD;AAAA,IACA,OAAO,OAAO,EAAE,QAAQ,MAAM;AAC7B,aAAO;AAAA,QACN,MAAM,MAAM,qBAAW,SAAS,OAAO;AAAA,MACxC;AAAA,IACD;AAAA,EACD;AACD","sourcesContent":["import ejs from \"ejs\";\nimport type { IfDefPreprocessorOptions } from \"./types\";\n\nexport const IFDEF_DEFAULT_REGEX =\n  /\\/\\* #ifdef \\(?([^)*]+)\\)? \\*\\/\\s+([.*|\\S|\\s]*?)\\s+\\/\\* #endif \\*\\//gm;\nexport async function parseIfDef(\n  code: string,\n  options: IfDefPreprocessorOptions = {\n    regex: IFDEF_DEFAULT_REGEX,\n    values: process.env,\n  }\n): Promise<string> {\n  // match /* #if (condition) */ ... /* #endif */\n  const parsed = code.replace(\n    options.regex || IFDEF_DEFAULT_REGEX,\n    (match, condition, content) => {\n      // handle else\n      const [ifContent, elseContent] = content.split(\"/* #else */\");\n      const result = ejs.render(\n        `<% if (${condition}) { %>${ifContent || \"\"}<% } else { %>${\n          elseContent || \"\"\n        }<% } %>`,\n        options.values\n      );\n\n      return result;\n    }\n  );\n\n  return (\n    parsed\n      ?.trim()\n      .split(\"\\n\")\n      .filter((l) => l.length)\n      .join(\"\\n\") || \"\"\n  );\n}\nexport default parseIfDef;\n","import parseIfDef, { IFDEF_DEFAULT_REGEX } from './ifdef-parser';\nimport type { IfDefPreprocessorOptions, SveltePreprocessor } from './types';\n\nexport function ifdefPreprocessor(\n\toptions: IfDefPreprocessorOptions = { regex: IFDEF_DEFAULT_REGEX }\n) {\n\treturn {\n\t\tmarkup: async ({ content }) => {\n\t\t\treturn {\n\t\t\t\tcode: await parseIfDef(content, options)\n\t\t\t};\n\t\t},\n\t\tscript: async ({ content }) => {\n\t\t\treturn {\n\t\t\t\tcode: await parseIfDef(content, options)\n\t\t\t};\n\t\t},\n\t\tstyle: async ({ content }) => {\n\t\t\treturn {\n\t\t\t\tcode: await parseIfDef(content, options)\n\t\t\t};\n\t\t}\n\t} as SveltePreprocessor;\n}\n"]}